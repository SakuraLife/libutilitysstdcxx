
#include<utility/sstd/cctype.hpp>

namespace utility
{
  namespace sstd
  {
    const static unsigned short _ctype[256] = {
      __CTYPE_CNTRL,
      __CTYPE_CNTRL,
      __CTYPE_CNTRL,
      __CTYPE_CNTRL,
      __CTYPE_CNTRL,
      __CTYPE_CNTRL,
      __CTYPE_CNTRL,
      __CTYPE_CNTRL,
      __CTYPE_CNTRL,
      __CTYPE_CNTRL | __CTYPE_SPACE | __CTYPE_TAB,
      __CTYPE_CNTRL | __CTYPE_SPACE,
      __CTYPE_CNTRL | __CTYPE_SPACE,
      __CTYPE_CNTRL | __CTYPE_SPACE,
      __CTYPE_CNTRL | __CTYPE_SPACE,
      __CTYPE_CNTRL,
      __CTYPE_CNTRL,
      __CTYPE_CNTRL,
      __CTYPE_CNTRL,
      __CTYPE_CNTRL,
      __CTYPE_CNTRL,
      __CTYPE_CNTRL,
      __CTYPE_CNTRL,
      __CTYPE_CNTRL,
      __CTYPE_CNTRL,
      __CTYPE_CNTRL,
      __CTYPE_CNTRL,
      __CTYPE_CNTRL,
      __CTYPE_CNTRL,
      __CTYPE_CNTRL,
      __CTYPE_CNTRL,
      __CTYPE_CNTRL,
      __CTYPE_CNTRL,
      __CTYPE_SPACE | __CTYPE_HSPACE,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_DIGIT,
      __CTYPE_DIGIT,
      __CTYPE_DIGIT,
      __CTYPE_DIGIT,
      __CTYPE_DIGIT,
      __CTYPE_DIGIT,
      __CTYPE_DIGIT,
      __CTYPE_DIGIT,
      __CTYPE_DIGIT,
      __CTYPE_DIGIT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_UPPER | __CTYPE_XDIGHT,
      __CTYPE_UPPER | __CTYPE_XDIGHT,
      __CTYPE_UPPER | __CTYPE_XDIGHT,
      __CTYPE_UPPER | __CTYPE_XDIGHT,
      __CTYPE_UPPER | __CTYPE_XDIGHT,
      __CTYPE_UPPER | __CTYPE_XDIGHT,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_LOWER | __CTYPE_XDIGHT,
      __CTYPE_LOWER | __CTYPE_XDIGHT,
      __CTYPE_LOWER | __CTYPE_XDIGHT,
      __CTYPE_LOWER | __CTYPE_XDIGHT,
      __CTYPE_LOWER | __CTYPE_XDIGHT,
      __CTYPE_LOWER | __CTYPE_XDIGHT,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_CNTRL,
      0x0000U,
      0x0000U,
      0x0000U,
      0x0000U,
      0x0000U,
      0x0000U,
      0x0000U,
      0x0000U,
      0x0000U,
      0x0000U,
      0x0000U,
      0x0000U,
      0x0000U,
      0x0000U,
      0x0000U,
      0x0000U,
      0x0000U,
      0x0000U,
      0x0000U,
      0x0000U,
      0x0000U,
      0x0000U,
      0x0000U,
      0x0000U,
      0x0000U,
      0x0000U,
      0x0000U,
      0x0000U,
      0x0000U,
      0x0000U,
      0x0000U,
      0x0000U,
      __CTYPE_SPACE | __CTYPE_HSPACE,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_PUNCT,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_PUNCT,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_UPPER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_PUNCT,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER,
      __CTYPE_LOWER
    };

    static bool cctype_range(int _ch) noexcept
    { return _ch >= 0 && _ch < 256;}

    int cctype(int _ch) noexcept
    {
      if(cctype_range(_ch))
      { return static_cast<int>(_ctype[_ch]);}
      return 0;
    }

  }
}

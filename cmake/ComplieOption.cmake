include(CheckCXXCompilerFlag)
include(CheckTypeSize)
include(CheckVariableExists)
include(CheckLibraryExists)

macro(mangle_name str output)
string(STRIP "${str}" strippedStr)
string(REGEX REPLACE "^/" "" strippedStr "${strippedStr}")
string(REGEX REPLACE "^-+" "" strippedStr "${strippedStr}")
string(REGEX REPLACE "-+$" "" strippedStr "${strippedStr}")
string(REPLACE "-" "_" strippedStr "${strippedStr}")
string(REPLACE "=" "_EQ_" strippedStr "${strippedStr}")
string(REPLACE "+" "X" strippedStr "${strippedStr}")
string(TOUPPER "${strippedStr}" ${output})
endmacro()

macro(add_compile_flags)
  foreach(f ${ARGN})
    list(APPEND CXX_COMPILE_FLAGS ${f})
  endforeach()
endmacro()

macro(add_compile_flags_if condition)
  if (${condition})
    add_compile_flags(${ARGN})
  endif()
endmacro()

macro(add_compile_flags_if_supported)
  foreach(flag ${ARGN})
    mangle_name("${flag}" flagname)
    check_cxx_compiler_flag("${flag}" "CXX_SUPPORTS_${flagname}_FLAG")
    add_compile_flags_if(CXX_SUPPORTS_${flagname}_FLAG ${flag})
  endforeach()
endmacro()

macro(add_link_flags_if_have deplist library func)
  check_library_exists(${library} "${func}" "" ___CHECK_ADD)
  if(${___CHECK_ADD})
    list(APPEND ${deplist} ${library})
  endif()
endmacro()

function(JOIN VALUES GLUE OUTPUT)
  string (REPLACE ";" "${GLUE}" _TMP_STR "${VALUES}")
  set (${OUTPUT} "${_TMP_STR}" PARENT_SCOPE)
endfunction()

macro(type_size)
  check_type_size(char            CXX_CHAR)
  check_type_size(short           CXX_SHORT)
  check_type_size(int             CXX_INT)
  check_type_size(long            CXX_LONG)
  check_type_size("long long"     CXX_LLONG)
  check_type_size(float           CXX_FLOAT)
  check_type_size(double          CXX_DOUBLE)
  check_type_size("long double"   CXX_LDOUBE)
  check_type_size("void*"         CXX_PTR)

  if(CXX_BITS EQUAL 1)
    math(EXPR CXX_BITS "64 / ${CXX_PTR}")
    set(CXX_SYSTEM_BITS "64")
  else(CXX_BITS EQUAL 1)
    math(EXPR CXX_BITS "32 / ${CXX_PTR}")
    set(CXX_SYSTEM_BITS "32")
  endif(CXX_BITS EQUAL 1)

  math(EXPR CXX_CHAR_BITS     "${CXX_BITS} * ${CXX_CHAR}")
  math(EXPR CXX_SHORT_BITS    "${CXX_BITS} * ${CXX_SHORT}")
  math(EXPR CXX_INT_BITS      "${CXX_BITS} * ${CXX_INT}")
  math(EXPR CXX_LONG_BITS     "${CXX_BITS} * ${CXX_LONG}")
  math(EXPR CXX_LLONG_BITS    "${CXX_BITS} * ${CXX_LLONG}")
  math(EXPR CXX_FLOAT_BITS    "${CXX_BITS} * ${CXX_FLOAT}")
  math(EXPR CXX_DOUBLE_BITS   "${CXX_BITS} * ${CXX_DOUBLE}")
  math(EXPR CXX_LDOUBE_BITS   "${CXX_BITS} * ${CXX_LDOUBE}")
  math(EXPR CXX_PTR_BITS "${CXX_PTR} * ${CXX_PTR}")
endmacro()
